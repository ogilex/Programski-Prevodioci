package pp.projekat;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\003\005\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\002\006" +
    "\000\002\002\006\000\002\002\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\011\013\000\002" +
    "\011\012\000\002\011\011\000\002\011\010\000\002\011" +
    "\007\000\002\011\006\000\002\011\005\000\002\011\004" +
    "\000\002\011\003\000\002\011\006\000\002\011\006\000" +
    "\002\011\005\000\002\011\004\000\002\011\006\000\002" +
    "\011\006\000\002\011\005\000\002\011\004\000\002\011" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\012\005\000\002\012\003\000\002\012\005\000" +
    "\002\015\005\000\002\015\003\000\002\015\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\004\000\002\014\005\000\002\014\005\000\002" +
    "\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\003\005\004\006\001\002\000\004\002" +
    "\165\001\002\000\004\002\ufffd\001\002\000\006\003\010" +
    "\023\007\001\002\000\006\003\011\007\013\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\012\003\016\005\022\006\021\013" +
    "\020\001\002\000\024\003\044\005\022\006\021\007\013" +
    "\011\034\012\045\013\020\023\043\024\036\001\002\000" +
    "\006\003\024\023\023\001\002\000\012\002\ufffa\003\ufffa" +
    "\010\ufffa\021\ufffa\001\002\000\024\003\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\023\ufff7\024\ufff7" +
    "\001\002\000\006\003\uffee\023\uffee\001\002\000\006\003" +
    "\uffed\023\uffed\001\002\000\006\003\uffef\023\uffef\001\002" +
    "\000\012\003\ufff0\017\ufff0\021\ufff0\022\ufff0\001\002\000" +
    "\026\003\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\021\033\023\ufff3\024\ufff3\001\002\000\010\003" +
    "\027\021\030\022\026\001\002\000\006\003\032\023\031" +
    "\001\002\000\024\003\ufff5\005\ufff5\006\ufff5\007\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\023\ufff5\024\ufff5\001\002\000\024" +
    "\003\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\023\ufff6\024\ufff6\001\002\000\012\003\ufff2\017\ufff2" +
    "\021\ufff2\022\ufff2\001\002\000\012\003\ufff1\017\ufff1\021" +
    "\ufff1\022\ufff1\001\002\000\024\003\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\011\ufff4\012\ufff4\013\ufff4\023\ufff4\024\ufff4\001" +
    "\002\000\006\003\157\016\160\001\002\000\010\003\uffd8" +
    "\010\uffd8\021\uffd8\001\002\000\006\003\140\016\141\001" +
    "\002\000\010\003\uffe1\010\uffe1\021\uffe1\001\002\000\010" +
    "\003\133\010\135\021\134\001\002\000\024\003\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\023\ufff9" +
    "\024\ufff9\001\002\000\010\003\uffea\010\uffea\021\uffea\001" +
    "\002\000\006\003\127\037\130\001\002\000\024\003\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\023" +
    "\ufff8\024\ufff8\001\002\000\006\003\046\016\047\001\002" +
    "\000\010\003\uffd9\010\uffd9\021\uffd9\001\002\000\012\003" +
    "\060\016\054\023\056\027\062\001\002\000\010\003\124" +
    "\017\123\022\122\001\002\000\040\003\uffcc\010\uffcc\014" +
    "\110\017\uffcc\020\103\021\uffcc\022\uffcc\025\uffcc\026\uffcc" +
    "\030\113\031\104\032\111\033\105\034\106\035\107\001" +
    "\002\000\020\003\uffd3\010\uffd3\017\uffd3\021\uffd3\022\uffd3" +
    "\025\uffd3\026\100\001\002\000\012\003\uffb4\017\uffb4\022" +
    "\uffb4\025\075\001\002\000\012\003\072\016\054\023\056" +
    "\027\062\001\002\000\044\003\uffc1\010\uffc1\014\uffc1\015" +
    "\063\017\uffc1\020\uffc1\021\uffc1\022\uffc1\025\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\064\001\002\000\044\003\uffbb\010\uffbb\014\uffbb\015\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\001\002\000\044\003\uffbc\010\uffbc\014\uffbc\015\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\025\uffbc\026\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\001" +
    "\002\000\010\003\uffda\010\uffda\021\uffda\001\002\000\020" +
    "\003\uffd0\010\uffd0\017\uffd0\021\uffd0\022\uffd0\025\uffd0\026" +
    "\uffd0\001\002\000\044\003\uffba\010\uffba\014\uffba\015\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\025\uffba\026\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\001\002\000\012\003\070\016\054\023\056\027\062\001" +
    "\002\000\012\003\066\016\054\023\056\027\062\001\002" +
    "\000\044\003\uffbe\010\uffbe\014\uffbe\015\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\001\002\000" +
    "\044\003\uffbd\010\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\001\002\000\044" +
    "\003\uffc0\010\uffc0\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\001\002\000\044\003" +
    "\uffbf\010\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\001\002\000\010\003\074" +
    "\017\073\025\075\001\002\000\044\003\uffb7\010\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\001\002\000\044\003\uffb9\010\uffb9\014\uffb9" +
    "\015\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\025\uffb9\026" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\001\002\000\044\003\uffb8\010\uffb8\014\uffb8\015" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\025\uffb8\026\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\001\002\000\012\003\077\016\054\023\056\027\062" +
    "\001\002\000\020\003\uffd4\010\uffd4\017\uffd4\021\uffd4\022" +
    "\uffd4\025\uffd4\026\100\001\002\000\016\003\uffd2\010\uffd2" +
    "\017\uffd2\021\uffd2\022\uffd2\025\uffd2\001\002\000\012\003" +
    "\102\016\054\023\056\027\062\001\002\000\020\003\uffd1" +
    "\010\uffd1\017\uffd1\021\uffd1\022\uffd1\025\uffd1\026\uffd1\001" +
    "\002\000\020\003\uffcf\010\uffcf\017\uffcf\021\uffcf\022\uffcf" +
    "\025\uffcf\026\uffcf\001\002\000\012\003\121\016\054\023" +
    "\056\027\062\001\002\000\012\003\uffca\016\uffca\023\uffca" +
    "\027\uffca\001\002\000\012\003\uffc8\016\uffc8\023\uffc8\027" +
    "\uffc8\001\002\000\012\003\uffc7\016\uffc7\023\uffc7\027\uffc7" +
    "\001\002\000\012\003\uffc6\016\uffc6\023\uffc6\027\uffc6\001" +
    "\002\000\012\003\117\016\054\023\056\027\062\001\002" +
    "\000\012\003\uffc9\016\uffc9\023\uffc9\027\uffc9\001\002\000" +
    "\012\003\115\016\054\023\056\027\062\001\002\000\012" +
    "\003\uffcb\016\uffcb\023\uffcb\027\uffcb\001\002\000\024\003" +
    "\uffce\010\uffce\014\110\017\uffce\020\103\021\uffce\022\uffce" +
    "\025\uffce\026\uffce\001\002\000\020\003\uffcd\010\uffcd\017" +
    "\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\001\002\000\044" +
    "\003\uffc5\010\uffc5\014\uffc5\015\063\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\064\001\002\000\040\003" +
    "\uffc4\010\uffc4\014\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\025\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\001\002\000\044\003\uffc3\010\uffc3\014\uffc3" +
    "\015\063\017\uffc3\020\uffc3\021\uffc3\022\uffc3\025\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\064\001\002\000\040\003\uffc2\010\uffc2\014\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\025\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\001\002\000" +
    "\012\003\126\016\054\023\056\027\062\001\002\000\010" +
    "\003\uffdc\010\uffdc\021\uffdc\001\002\000\010\003\uffdb\010" +
    "\uffdb\021\uffdb\001\002\000\012\003\uffb6\017\uffb6\022\uffb6" +
    "\025\075\001\002\000\010\003\uffb5\017\uffb5\022\uffb5\001" +
    "\002\000\010\003\uffd5\010\uffd5\021\uffd5\001\002\000\012" +
    "\003\132\016\054\023\056\027\062\001\002\000\012\003" +
    "\uffd7\010\uffd7\021\uffd7\025\075\001\002\000\010\003\uffd6" +
    "\010\uffd6\021\uffd6\001\002\000\024\002\ufffb\003\ufffb\007" +
    "\013\010\ufffb\011\034\012\045\021\ufffb\023\043\024\036" +
    "\001\002\000\014\007\013\011\034\012\045\023\043\024" +
    "\036\001\002\000\012\002\ufffc\003\ufffc\010\ufffc\021\ufffc" +
    "\001\002\000\010\003\uffec\010\uffec\021\uffec\001\002\000" +
    "\010\003\uffeb\010\uffeb\021\uffeb\001\002\000\010\003\uffe2" +
    "\010\uffe2\021\uffe2\001\002\000\012\003\143\016\054\023" +
    "\056\027\062\001\002\000\010\003\145\022\144\025\075" +
    "\001\002\000\010\003\uffe3\010\uffe3\021\uffe3\001\002\000" +
    "\012\003\147\016\054\023\056\027\062\001\002\000\010" +
    "\003\uffe4\010\uffe4\021\uffe4\001\002\000\010\003\151\022" +
    "\150\025\075\001\002\000\010\003\uffe5\010\uffe5\021\uffe5" +
    "\001\002\000\012\003\153\016\054\023\056\027\062\001" +
    "\002\000\010\003\uffe6\010\uffe6\021\uffe6\001\002\000\010" +
    "\003\155\017\154\025\075\001\002\000\010\003\uffe7\010" +
    "\uffe7\021\uffe7\001\002\000\014\007\013\011\034\012\045" +
    "\023\043\024\036\001\002\000\010\003\uffe8\010\uffe8\021" +
    "\uffe8\001\002\000\010\003\uffe9\010\uffe9\021\uffe9\001\002" +
    "\000\010\003\uffdd\010\uffdd\021\uffdd\001\002\000\006\003" +
    "\161\023\023\001\002\000\010\003\uffde\010\uffde\021\uffde" +
    "\001\002\000\010\003\164\017\163\022\026\001\002\000" +
    "\010\003\uffe0\010\uffe0\021\uffe0\001\002\000\010\003\uffdf" +
    "\010\uffdf\021\uffdf\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\013\006\016\007\014\001\001\000\016\002\034" +
    "\005\037\006\040\007\014\011\041\013\036\001\001\000" +
    "\004\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\052\014\047\015\051\016\060\017\050" +
    "\021\054\022\056\001\001\000\002\001\001\000\004\020" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\070\015\051\016\060\017\050\021\054\022\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\066\001\001\000\004\022\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\075\016\060\017\050\021" +
    "\054\022\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\100\017\050\021\054\022\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\117\022\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\115\022\056\001\001" +
    "\000\002\001\001\000\010\017\113\021\054\022\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\124\015\051\016\060\017\050" +
    "\021\054\022\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\130\015\051\016\060\017\050\021\054\022" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\034\011\136\013\036\001\001\000\010\002\034\011" +
    "\135\013\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\141\015" +
    "\051\016\060\017\050\021\054\022\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\145\015\051\016" +
    "\060\017\050\021\054\022\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\151\015" +
    "\051\016\060\017\050\021\054\022\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\034\011\155\013\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;
   public static void main(String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   if ( parser.errNo == 0 )
                System.out.println( "Parsiranje zavrseno. Nema gresaka" );
           else
                System.out.println( "Parsiranje je zavrseno sa brojem gresaka:" + parser.errNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e.getMessage());
	  }
   }
   public int getLine()
   {
      return (( MPLexer) getScanner()).getLine();
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action_part00000000(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ID Block 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= PROGRAM ID error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.peek()).value;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " + "Telo programa je nekorektno.");
                           parser.errNo++;
                        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= PROGRAM error 
            {
              Object RESULT =null;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ime promenljive.");
                           parser.errNo++;
                        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error 
            {
              Object RESULT =null;
		
                           System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje rec 'program'.");
                           parser.errNo++;
                        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Program",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= BEGIN VarSection StatementList END 
            {
              Object RESULT =null;
		
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= BEGIN VarSection StatementList error 
            {
              Object RESULT =null;
		
                            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje kljucna rec 'end'.");
                            parser.errNo++;
                         
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= BEGIN error 
            {
              Object RESULT =null;
		
                            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Telo bloka je nekorektno");
                            parser.errNo++;
                         
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Block",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarSection ::= VarSection VarDecl 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarSection",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarSection ::= VarSection error 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje deklaracija.");
               parser.errNo++;
             
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarSection",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarSection ::= VarDecl 
            {
              Object RESULT =null;
		
               System.out.println( "Redukcija po smeni 4." );
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarSection",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type NameList SEMI 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 5." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarDecl ::= Type NameList error 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ';' .");
               parser.errNo++;
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ime tipa .");
               parser.errNo++;              
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje deklaracija .");
               parser.errNo++;              
            
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NameList ::= NameList COMMA ID 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 6." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NameList ::= NameList COMMA error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ime promenljive nakon simbola ','" );
            parser.errNo++;            
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NameList ::= ID 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 7." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NameList",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= INT 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 8." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= REAL 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 9." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= BOOL 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 10." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList SEMI Statement 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 11." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StatementList ::= StatementList error Statement 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ';'" );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StatementList ::= Statement 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 12." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("StatementList",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= FOR LEFTPAR Expression COMMA Expression COMMA Expression RIGHTPAR Statement 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 13." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-8)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= FOR LEFTPAR Expression COMMA Expression COMMA Expression error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ')' " );
            parser.errNo++;               
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= FOR LEFTPAR Expression COMMA Expression COMMA error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje 3. izraz " );
            parser.errNo++;               
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= FOR LEFTPAR Expression COMMA Expression error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ',' izmedju 2. i 3. izraza." );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= FOR LEFTPAR Expression COMMA error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje 2. izraz " );
            parser.errNo++;               
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= FOR LEFTPAR Expression error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ',' izmedju 1. i 2. izraza." );
            parser.errNo++;               
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= FOR LEFTPAR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje 1. izraz " );
            parser.errNo++;               
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= FOR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '(' " );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= Assignement 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 14." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= READ LEFTPAR NameList RIGHTPAR 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 15." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= READ LEFTPAR NameList error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ')' " );
            parser.errNo++;           
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= READ LEFTPAR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ime promenljive " );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= READ error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '(' " );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= WRITE LEFTPAR ExpressionList RIGHTPAR 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 16." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= WRITE LEFTPAR ExpressionList error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ')' " );
            parser.errNo++;           
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= WRITE LEFTPAR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje izraz " );
            parser.errNo++;           
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= WRITE error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '(' " );
            parser.errNo++;            
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Block 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 17." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Assignement ::= ID ASSIGN Expression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 18." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Assignement",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Assignement ::= ID ASSIGN error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;  
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Assignement",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Assignement ::= ID error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje '=' " );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Assignement",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 19." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= AndExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 20." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Expression OR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 21." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AndExpression ::= RelExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 22." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AndExpression ::= AndExpression AND error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;                
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("AndExpression",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 23." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelExpression ::= ArExpression RelOp error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelExpression ::= ArExpression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 24." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= LESS 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 25." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelOp ::= LESSEQ 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 26." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RelOp ::= EQ 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 27." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RelOp ::= NOTEQ 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 28." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RelOp ::= GREATER 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 29." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RelOp ::= GREATEREQ 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 30." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ArExpression ::= ArExpression PLUS Term 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 31." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ArExpression ::= ArExpression PLUS error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ArExpression ::= ArExpression MINUS Term 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 32." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ArExpression ::= ArExpression MINUS error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ArExpression ::= Term 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 33." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ArExpression",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Term ::= Term MUL Factor 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 34." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Term ::= Term MUL error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;             
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Term ::= Term DIV Factor 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 35." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Term ::= Term DIV error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nerkorektan izraz " );
            parser.errNo++;              
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Term ::= Factor 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 36." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Factor ::= ID 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 37." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Factor ::= CONST 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 38." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Factor ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 39." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Factor ::= LEFTPAR Expression error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje ')' " );
            parser.errNo++;                
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Factor ::= LEFTPAR error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje izraz " );
            parser.errNo++;                
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Factor",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 40." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpressionList ::= ExpressionList COMMA error 
            {
              Object RESULT =null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": " + "Nedostaje izraz " );
            parser.errNo++;            
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpressionList ::= Expression 
            {
              Object RESULT =null;
		
          System.out.println( "Redukcija po smeni 41." );
          
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("ExpressionList",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
              return CUP$MPParser$do_action_part00000000(
                               CUP$MPParser$act_num,
                               CUP$MPParser$parser,
                               CUP$MPParser$stack,
                               CUP$MPParser$top);
    }
}

}
